/* prettier-ignore-start */

/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file is auto-generated by TanStack Router

import { createFileRoute } from '@tanstack/react-router'

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as SignupImport } from './routes/signup'
import { Route as ResetPasswordImport } from './routes/resetPassword'
import { Route as QuestionsImport } from './routes/questions'
import { Route as PolicyImport } from './routes/policy'
import { Route as LoginImport } from './routes/login'
import { Route as ContactImport } from './routes/contact'
import { Route as EventsIndexImport } from './routes/events/index'
import { Route as EventsNewImport } from './routes/events/new'
import { Route as EventsEventIdImport } from './routes/events/$eventId'

// Create Virtual Routes

const ProfileLazyImport = createFileRoute('/profile')()
const AboutLazyImport = createFileRoute('/about')()
const IndexLazyImport = createFileRoute('/')()

// Create/Update Routes

const ProfileLazyRoute = ProfileLazyImport.update({
  id: '/profile',
  path: '/profile',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/profile.lazy').then((d) => d.Route))

const AboutLazyRoute = AboutLazyImport.update({
  id: '/about',
  path: '/about',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/about.lazy').then((d) => d.Route))

const SignupRoute = SignupImport.update({
  id: '/signup',
  path: '/signup',
  getParentRoute: () => rootRoute,
} as any)

const ResetPasswordRoute = ResetPasswordImport.update({
  id: '/resetPassword',
  path: '/resetPassword',
  getParentRoute: () => rootRoute,
} as any)

const QuestionsRoute = QuestionsImport.update({
  id: '/questions',
  path: '/questions',
  getParentRoute: () => rootRoute,
} as any)

const PolicyRoute = PolicyImport.update({
  id: '/policy',
  path: '/policy',
  getParentRoute: () => rootRoute,
} as any)

const LoginRoute = LoginImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => rootRoute,
} as any)

const ContactRoute = ContactImport.update({
  id: '/contact',
  path: '/contact',
  getParentRoute: () => rootRoute,
} as any)

const IndexLazyRoute = IndexLazyImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/index.lazy').then((d) => d.Route))

const EventsIndexRoute = EventsIndexImport.update({
  id: '/events/',
  path: '/events/',
  getParentRoute: () => rootRoute,
} as any)

const EventsNewRoute = EventsNewImport.update({
  id: '/events/new',
  path: '/events/new',
  getParentRoute: () => rootRoute,
} as any)

const EventsEventIdRoute = EventsEventIdImport.update({
  id: '/events/$eventId',
  path: '/events/$eventId',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexLazyImport
      parentRoute: typeof rootRoute
    }
    '/contact': {
      id: '/contact'
      path: '/contact'
      fullPath: '/contact'
      preLoaderRoute: typeof ContactImport
      parentRoute: typeof rootRoute
    }
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginImport
      parentRoute: typeof rootRoute
    }
    '/policy': {
      id: '/policy'
      path: '/policy'
      fullPath: '/policy'
      preLoaderRoute: typeof PolicyImport
      parentRoute: typeof rootRoute
    }
    '/questions': {
      id: '/questions'
      path: '/questions'
      fullPath: '/questions'
      preLoaderRoute: typeof QuestionsImport
      parentRoute: typeof rootRoute
    }
    '/resetPassword': {
      id: '/resetPassword'
      path: '/resetPassword'
      fullPath: '/resetPassword'
      preLoaderRoute: typeof ResetPasswordImport
      parentRoute: typeof rootRoute
    }
    '/signup': {
      id: '/signup'
      path: '/signup'
      fullPath: '/signup'
      preLoaderRoute: typeof SignupImport
      parentRoute: typeof rootRoute
    }
    '/about': {
      id: '/about'
      path: '/about'
      fullPath: '/about'
      preLoaderRoute: typeof AboutLazyImport
      parentRoute: typeof rootRoute
    }
    '/profile': {
      id: '/profile'
      path: '/profile'
      fullPath: '/profile'
      preLoaderRoute: typeof ProfileLazyImport
      parentRoute: typeof rootRoute
    }
    '/events/$eventId': {
      id: '/events/$eventId'
      path: '/events/$eventId'
      fullPath: '/events/$eventId'
      preLoaderRoute: typeof EventsEventIdImport
      parentRoute: typeof rootRoute
    }
    '/events/new': {
      id: '/events/new'
      path: '/events/new'
      fullPath: '/events/new'
      preLoaderRoute: typeof EventsNewImport
      parentRoute: typeof rootRoute
    }
    '/events/': {
      id: '/events/'
      path: '/events'
      fullPath: '/events'
      preLoaderRoute: typeof EventsIndexImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexLazyRoute
  '/contact': typeof ContactRoute
  '/login': typeof LoginRoute
  '/policy': typeof PolicyRoute
  '/questions': typeof QuestionsRoute
  '/resetPassword': typeof ResetPasswordRoute
  '/signup': typeof SignupRoute
  '/about': typeof AboutLazyRoute
  '/profile': typeof ProfileLazyRoute
  '/events/$eventId': typeof EventsEventIdRoute
  '/events/new': typeof EventsNewRoute
  '/events': typeof EventsIndexRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexLazyRoute
  '/contact': typeof ContactRoute
  '/login': typeof LoginRoute
  '/policy': typeof PolicyRoute
  '/questions': typeof QuestionsRoute
  '/resetPassword': typeof ResetPasswordRoute
  '/signup': typeof SignupRoute
  '/about': typeof AboutLazyRoute
  '/profile': typeof ProfileLazyRoute
  '/events/$eventId': typeof EventsEventIdRoute
  '/events/new': typeof EventsNewRoute
  '/events': typeof EventsIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexLazyRoute
  '/contact': typeof ContactRoute
  '/login': typeof LoginRoute
  '/policy': typeof PolicyRoute
  '/questions': typeof QuestionsRoute
  '/resetPassword': typeof ResetPasswordRoute
  '/signup': typeof SignupRoute
  '/about': typeof AboutLazyRoute
  '/profile': typeof ProfileLazyRoute
  '/events/$eventId': typeof EventsEventIdRoute
  '/events/new': typeof EventsNewRoute
  '/events/': typeof EventsIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/contact'
    | '/login'
    | '/policy'
    | '/questions'
    | '/resetPassword'
    | '/signup'
    | '/about'
    | '/profile'
    | '/events/$eventId'
    | '/events/new'
    | '/events'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/contact'
    | '/login'
    | '/policy'
    | '/questions'
    | '/resetPassword'
    | '/signup'
    | '/about'
    | '/profile'
    | '/events/$eventId'
    | '/events/new'
    | '/events'
  id:
    | '__root__'
    | '/'
    | '/contact'
    | '/login'
    | '/policy'
    | '/questions'
    | '/resetPassword'
    | '/signup'
    | '/about'
    | '/profile'
    | '/events/$eventId'
    | '/events/new'
    | '/events/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexLazyRoute: typeof IndexLazyRoute
  ContactRoute: typeof ContactRoute
  LoginRoute: typeof LoginRoute
  PolicyRoute: typeof PolicyRoute
  QuestionsRoute: typeof QuestionsRoute
  ResetPasswordRoute: typeof ResetPasswordRoute
  SignupRoute: typeof SignupRoute
  AboutLazyRoute: typeof AboutLazyRoute
  ProfileLazyRoute: typeof ProfileLazyRoute
  EventsEventIdRoute: typeof EventsEventIdRoute
  EventsNewRoute: typeof EventsNewRoute
  EventsIndexRoute: typeof EventsIndexRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexLazyRoute: IndexLazyRoute,
  ContactRoute: ContactRoute,
  LoginRoute: LoginRoute,
  PolicyRoute: PolicyRoute,
  QuestionsRoute: QuestionsRoute,
  ResetPasswordRoute: ResetPasswordRoute,
  SignupRoute: SignupRoute,
  AboutLazyRoute: AboutLazyRoute,
  ProfileLazyRoute: ProfileLazyRoute,
  EventsEventIdRoute: EventsEventIdRoute,
  EventsNewRoute: EventsNewRoute,
  EventsIndexRoute: EventsIndexRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* prettier-ignore-end */

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/contact",
        "/login",
        "/policy",
        "/questions",
        "/resetPassword",
        "/signup",
        "/about",
        "/profile",
        "/events/$eventId",
        "/events/new",
        "/events/"
      ]
    },
    "/": {
      "filePath": "index.lazy.tsx"
    },
    "/contact": {
      "filePath": "contact.tsx"
    },
    "/login": {
      "filePath": "login.tsx"
    },
    "/policy": {
      "filePath": "policy.tsx"
    },
    "/questions": {
      "filePath": "questions.tsx"
    },
    "/resetPassword": {
      "filePath": "resetPassword.tsx"
    },
    "/signup": {
      "filePath": "signup.tsx"
    },
    "/about": {
      "filePath": "about.lazy.tsx"
    },
    "/profile": {
      "filePath": "profile.lazy.tsx"
    },
    "/events/$eventId": {
      "filePath": "events/$eventId.tsx"
    },
    "/events/new": {
      "filePath": "events/new.tsx"
    },
    "/events/": {
      "filePath": "events/index.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
